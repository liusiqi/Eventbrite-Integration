ASP.NET Response.Redirect(string,bool); how does it work??
	1. Description1: http://www.google.com/url?q=http%3A%2F%2Fwww.dotnetperls.com%2Fredirect&sa=D&sntz=1&usg=AFQjCNFHpJVvdvapoTfNANafedx3MYd_5Q
	2. More about Server.transfer: http://www.google.com/url?q=http%3A%2F%2Fwww.codeproject.com%2FQuestions%2F198737%2FWhen-will-use-Response-Redirect-Server-Transfer-in&sa=D&sntz=1&usg=AFQjCNHigiq7qWAKU1V389p3_wLPm6r5MA
	3. Details: http://www.google.com/url?q=http%3A%2F%2Fapmblog.dynatrace.com%2F2010%2F06%2F10%2Fhow-asp-net-postbacks-and-redirects-work%2F&sa=D&sntz=1&usg=AFQjCNFizWTiATI7bSVxtybYJ5_pIyZj7A
	4. This is the best explanation so far: http://www.google.com/url?q=http%3A%2F%2Fwww.adrianworlddesign.com%2FKnowledge-Base%2FWeb-Standards%2FThings-about-Hypertext%2FHow-does-a-redirect-work&sa=D&sntz=1&usg=AFQjCNFqybcKk1Pl705Z46oFb8WGOK0Bvg
	5. another good link: http://www.google.com/url?q=http%3A%2F%2Fclassicasp.aspfaq.com%2Fgeneral%2Fwhat-do-i-need-to-know-about-response-redirect.html&sa=D&sntz=1&usg=AFQjCNHO8FcJNRKmRp9AhZM_DlhqgE0-vw

Access Token with 52 events: 5Z5FE6HF3BJ763FOJFOQ 
Access Token with 0 events: UKBCL3D77A7VP5HIMNXR

Pagination : http://developer.eventbrite.com/docs/pagination/

Eventbrite API Methods:
	1. Request Parameters General: http://developer.eventbrite.com/docs/
	2 User Details: http://developer.eventbrite.com/docs/user-details/


Old code for parsing events:
                if (page_count == 1)
                {
                    for (int i = 0; i < event_count; i++)
                    {
                        string event_status = pagination_events["events"][i]["status"];
                        if (event_status == "live")
                        {
                            string event_name = pagination_events["events"][i]["name"]["text"];
                            string event_id = pagination_events["events"][i]["id"];
                            string event_link = pagination_events["events"][i]["url"];
                            Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                            count_alive++;
                        }
                    }
                }
				else if (page_count == 2)
                {
                    for (int i = 0; i < 50; i++)
                    {
                        string event_status = pagination_events["events"][i]["status"];
                        if (event_status == "live")
                        {
                            string event_name = pagination_events["events"][i]["name"]["text"];
                            string event_id = pagination_events["events"][i]["id"];
                            string event_link = pagination_events["events"][i]["url"];
                            Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                            count_alive++;
                        }
                    }

                    string Json_Last_Page = User_Events(2);
                    dynamic last_page_events = serializer.DeserializeObject(Json_Last_Page);
                    for (int i = 0; i < event_count/50; i++)
                    {
                        string event_status = last_page_events["events"][i]["status"];
                        if (event_status == "live")
                        {
                            string event_name = last_page_events["events"][i]["name"]["text"];
                            string event_id = last_page_events["events"][i]["id"];
                            string event_link = last_page_events["events"][i]["url"];
                            Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                            count_alive++;
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < 50; i++)
                    {
                        string event_status = pagination_events["events"][i]["status"];
                        if (event_status == "live")
                        {
                            string event_name = pagination_events["events"][i]["name"]["text"];
                            string event_id = pagination_events["events"][i]["id"];
                            string event_link = pagination_events["events"][i]["url"];
                            Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                            count_alive++;
                        }
                    }

                    for (int page_number = 2; page_number < page_count; page_number++)
                    {
                        string Json_Middle_Pages = User_Events(page_number);
                        dynamic middle_page_events = serializer.DeserializeObject(Json_Middle_Pages);
                        for (int i = 0; i < 50; i++)
                        {
                            string event_status = middle_page_events["events"][i]["status"];
                            if (event_status == "live")
                            {
                                string event_name = middle_page_events["events"][i]["name"]["text"];
                                string event_id = middle_page_events["events"][i]["id"];
                                string event_link = middle_page_events["events"][i]["url"];
                                Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                                count_alive++;
                            }
                        }
                    }

                    string Json_Last_Page = User_Events(2);
                    dynamic last_page_events = serializer.DeserializeObject(Json_Last_Page);
                    for (int i = 0; i < event_count / 50; i++)
                    {
                        string event_status = last_page_events["events"][i]["status"];
                        if (event_status == "live")
                        {
                            string event_name = last_page_events["events"][i]["name"]["text"];
                            string event_id = last_page_events["events"][i]["id"];
                            string event_link = last_page_events["events"][i]["url"];
                            Name_Link.Add(new Tuple<string, string>(event_name, event_link));
                            count_alive++;
                        }
                    }
                }

Old code for get user ID:
		    //try
            //{       
            //    // Create request url, the method is get, content type is Json, add AccessToken to the Authorization header.
            //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            //    request.Method = "GET";
            //    //request.Timeout = 200000;
            //    request.ContentType = "application/json; charset=UTF-8";
            //    request.Headers.Add("Authorization", "Bearer " + AccessToken);

            //    // Send the request and get response
            //    HttpWebResponse response = (HttpWebResponse)request.GetResponse();

            //    // Create a stream to read the response
            //    Stream streamResponse = response.GetResponseStream();

            //    //Read Body of Response
            //    StreamReader sReader = new StreamReader(streamResponse);
            //    string userInfo = sReader.ReadToEnd();

            //    sReader.Close();
            //    response.Close();

            //    // Since the stage is in Json format, decode it and the id is belonged to "id" key.
            //    JavaScriptSerializer serializer = new JavaScriptSerializer();
            //    dynamic json = serializer.DeserializeObject(userInfo);
            //    userID = json["id"];
            //}
            //catch(WebException e)
            //{
            //    string ErrorMessage = "Error : retrieving user ID failed. " + e;
            //}

Old code for geting user owned events:
            //try
            //{
            //    // again, the method of the request is GET, and the accesstoken is used
            //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            //    request.Method = "GET";
            //    request.ContentType = "application/json; charset=UTF-8";
            //    request.Headers.Add("Authorization", "Bearer " + AccessToken);
            //    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            //    Stream streamResponse = response.GetResponseStream();
            //    StreamReader sReader = new StreamReader(streamResponse);
            //    string userInfo = sReader.ReadToEnd();
            //    sReader.Close();
            //    response.Close();
            //    Pagination_Events = userInfo;
            //    return Pagination_Events;
            //}
            //catch(WebException e)
            //{
            //    string ErrorMessage = "Error : retrieving Pagination and Events failed. " + e;
            //    return ErrorMessage;
            //}